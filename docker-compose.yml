# Docker Compose file for Vernon Cyber Security Solutions
# Compatible with Docker Desktop and docker compose v2 command
# Usage: docker compose up -d

name: vernon-cybersec

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: cybersec_db
      POSTGRES_USER: cybersec_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    command: ["postgres", "-p", "5455"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5455:5455"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybersec_user -d cybersec_db -p 5455"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cybersec_network

  # NestJS Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://cybersec_user:${DB_PASSWORD}@postgres:5455/cybersec_db
      - JWT_SECRET=${JWT_SECRET}
      - PORT=5001
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5001 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cybersec_network

  # NextJS Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5001
      - NEXT_PUBLIC_COMPANY_NAME=Vernon Cyber Security Solutions
    ports:
      - "5000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - cybersec_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "8088:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cybersec_network

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6389:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - cybersec_network

volumes:
  postgres_data:
  redis_data:

networks:
  cybersec_network:
    driver: bridge
